// Generated by view binder compiler. Do not edit!
package com.example.xpense_tracker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.xpense_tracker.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialTextView currency;

  @NonNull
  public final Chip filterChipAll;

  @NonNull
  public final Chip filterChipDateRange;

  @NonNull
  public final Chip filterChipExpense;

  @NonNull
  public final ChipGroup filterChipGroup;

  @NonNull
  public final Chip filterChipIncome;

  @NonNull
  public final FloatingActionButton floatingActionButton;

  @NonNull
  public final ChipGroup incomeOrExpenseChipGroup;

  @NonNull
  public final MaterialTextView monthlyExpense;

  @NonNull
  public final MaterialTextView monthlyExpenseTitle;

  @NonNull
  public final MaterialTextView monthlyIncome;

  @NonNull
  public final MaterialTextView monthlyIncomeTitle;

  @NonNull
  public final LinearLayout monthlyState;

  @NonNull
  public final MaterialCardView titleCardView;

  @NonNull
  public final MaterialCardView transactionsMaterialCardView;

  private FragmentHomeBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialTextView currency, @NonNull Chip filterChipAll,
      @NonNull Chip filterChipDateRange, @NonNull Chip filterChipExpense,
      @NonNull ChipGroup filterChipGroup, @NonNull Chip filterChipIncome,
      @NonNull FloatingActionButton floatingActionButton,
      @NonNull ChipGroup incomeOrExpenseChipGroup, @NonNull MaterialTextView monthlyExpense,
      @NonNull MaterialTextView monthlyExpenseTitle, @NonNull MaterialTextView monthlyIncome,
      @NonNull MaterialTextView monthlyIncomeTitle, @NonNull LinearLayout monthlyState,
      @NonNull MaterialCardView titleCardView,
      @NonNull MaterialCardView transactionsMaterialCardView) {
    this.rootView = rootView;
    this.currency = currency;
    this.filterChipAll = filterChipAll;
    this.filterChipDateRange = filterChipDateRange;
    this.filterChipExpense = filterChipExpense;
    this.filterChipGroup = filterChipGroup;
    this.filterChipIncome = filterChipIncome;
    this.floatingActionButton = floatingActionButton;
    this.incomeOrExpenseChipGroup = incomeOrExpenseChipGroup;
    this.monthlyExpense = monthlyExpense;
    this.monthlyExpenseTitle = monthlyExpenseTitle;
    this.monthlyIncome = monthlyIncome;
    this.monthlyIncomeTitle = monthlyIncomeTitle;
    this.monthlyState = monthlyState;
    this.titleCardView = titleCardView;
    this.transactionsMaterialCardView = transactionsMaterialCardView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.currency;
      MaterialTextView currency = ViewBindings.findChildViewById(rootView, id);
      if (currency == null) {
        break missingId;
      }

      id = R.id.filterChipAll;
      Chip filterChipAll = ViewBindings.findChildViewById(rootView, id);
      if (filterChipAll == null) {
        break missingId;
      }

      id = R.id.filterChipDateRange;
      Chip filterChipDateRange = ViewBindings.findChildViewById(rootView, id);
      if (filterChipDateRange == null) {
        break missingId;
      }

      id = R.id.filterChipExpense;
      Chip filterChipExpense = ViewBindings.findChildViewById(rootView, id);
      if (filterChipExpense == null) {
        break missingId;
      }

      id = R.id.filterChipGroup;
      ChipGroup filterChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (filterChipGroup == null) {
        break missingId;
      }

      id = R.id.filterChipIncome;
      Chip filterChipIncome = ViewBindings.findChildViewById(rootView, id);
      if (filterChipIncome == null) {
        break missingId;
      }

      id = R.id.floatingActionButton;
      FloatingActionButton floatingActionButton = ViewBindings.findChildViewById(rootView, id);
      if (floatingActionButton == null) {
        break missingId;
      }

      id = R.id.incomeOrExpenseChipGroup;
      ChipGroup incomeOrExpenseChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (incomeOrExpenseChipGroup == null) {
        break missingId;
      }

      id = R.id.monthlyExpense;
      MaterialTextView monthlyExpense = ViewBindings.findChildViewById(rootView, id);
      if (monthlyExpense == null) {
        break missingId;
      }

      id = R.id.monthlyExpenseTitle;
      MaterialTextView monthlyExpenseTitle = ViewBindings.findChildViewById(rootView, id);
      if (monthlyExpenseTitle == null) {
        break missingId;
      }

      id = R.id.monthlyIncome;
      MaterialTextView monthlyIncome = ViewBindings.findChildViewById(rootView, id);
      if (monthlyIncome == null) {
        break missingId;
      }

      id = R.id.monthlyIncomeTitle;
      MaterialTextView monthlyIncomeTitle = ViewBindings.findChildViewById(rootView, id);
      if (monthlyIncomeTitle == null) {
        break missingId;
      }

      id = R.id.monthlyState;
      LinearLayout monthlyState = ViewBindings.findChildViewById(rootView, id);
      if (monthlyState == null) {
        break missingId;
      }

      id = R.id.titleCardView;
      MaterialCardView titleCardView = ViewBindings.findChildViewById(rootView, id);
      if (titleCardView == null) {
        break missingId;
      }

      id = R.id.transactionsMaterialCardView;
      MaterialCardView transactionsMaterialCardView = ViewBindings.findChildViewById(rootView, id);
      if (transactionsMaterialCardView == null) {
        break missingId;
      }

      return new FragmentHomeBinding((ConstraintLayout) rootView, currency, filterChipAll,
          filterChipDateRange, filterChipExpense, filterChipGroup, filterChipIncome,
          floatingActionButton, incomeOrExpenseChipGroup, monthlyExpense, monthlyExpenseTitle,
          monthlyIncome, monthlyIncomeTitle, monthlyState, titleCardView,
          transactionsMaterialCardView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
