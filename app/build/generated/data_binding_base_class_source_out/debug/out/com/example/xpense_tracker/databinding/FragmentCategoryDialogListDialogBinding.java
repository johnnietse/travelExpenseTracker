// Generated by view binder compiler. Do not edit!
package com.example.xpense_tracker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.xpense_tracker.R;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentCategoryDialogListDialogBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ExtendedFloatingActionButton addFabButton;

  @NonNull
  public final ConstraintLayout categoryDialog;

  @NonNull
  public final TextInputEditText categoryNameText;

  @NonNull
  public final TextInputLayout categoryNameTextLayout;

  @NonNull
  public final ConstraintLayout constraintLayoutTapper;

  @NonNull
  public final ExtendedFloatingActionButton deleteFabButton;

  @NonNull
  public final ExtendedFloatingActionButton deleteSubCategoriesFabButton;

  @NonNull
  public final Chip expenseChip;

  @NonNull
  public final Chip incomeChip;

  @NonNull
  public final ChipGroup incomeOrExpenseChipGroup;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final ChipGroup subCategoriesChipGroup;

  private FragmentCategoryDialogListDialogBinding(@NonNull ConstraintLayout rootView,
      @NonNull ExtendedFloatingActionButton addFabButton, @NonNull ConstraintLayout categoryDialog,
      @NonNull TextInputEditText categoryNameText, @NonNull TextInputLayout categoryNameTextLayout,
      @NonNull ConstraintLayout constraintLayoutTapper,
      @NonNull ExtendedFloatingActionButton deleteFabButton,
      @NonNull ExtendedFloatingActionButton deleteSubCategoriesFabButton, @NonNull Chip expenseChip,
      @NonNull Chip incomeChip, @NonNull ChipGroup incomeOrExpenseChipGroup,
      @NonNull LinearLayout linearLayout, @NonNull ChipGroup subCategoriesChipGroup) {
    this.rootView = rootView;
    this.addFabButton = addFabButton;
    this.categoryDialog = categoryDialog;
    this.categoryNameText = categoryNameText;
    this.categoryNameTextLayout = categoryNameTextLayout;
    this.constraintLayoutTapper = constraintLayoutTapper;
    this.deleteFabButton = deleteFabButton;
    this.deleteSubCategoriesFabButton = deleteSubCategoriesFabButton;
    this.expenseChip = expenseChip;
    this.incomeChip = incomeChip;
    this.incomeOrExpenseChipGroup = incomeOrExpenseChipGroup;
    this.linearLayout = linearLayout;
    this.subCategoriesChipGroup = subCategoriesChipGroup;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentCategoryDialogListDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentCategoryDialogListDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_category_dialog_list_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentCategoryDialogListDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addFabButton;
      ExtendedFloatingActionButton addFabButton = ViewBindings.findChildViewById(rootView, id);
      if (addFabButton == null) {
        break missingId;
      }

      ConstraintLayout categoryDialog = (ConstraintLayout) rootView;

      id = R.id.categoryNameText;
      TextInputEditText categoryNameText = ViewBindings.findChildViewById(rootView, id);
      if (categoryNameText == null) {
        break missingId;
      }

      id = R.id.categoryNameTextLayout;
      TextInputLayout categoryNameTextLayout = ViewBindings.findChildViewById(rootView, id);
      if (categoryNameTextLayout == null) {
        break missingId;
      }

      id = R.id.constraintLayoutTapper;
      ConstraintLayout constraintLayoutTapper = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayoutTapper == null) {
        break missingId;
      }

      id = R.id.deleteFabButton;
      ExtendedFloatingActionButton deleteFabButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteFabButton == null) {
        break missingId;
      }

      id = R.id.deleteSubCategoriesFabButton;
      ExtendedFloatingActionButton deleteSubCategoriesFabButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteSubCategoriesFabButton == null) {
        break missingId;
      }

      id = R.id.expenseChip;
      Chip expenseChip = ViewBindings.findChildViewById(rootView, id);
      if (expenseChip == null) {
        break missingId;
      }

      id = R.id.incomeChip;
      Chip incomeChip = ViewBindings.findChildViewById(rootView, id);
      if (incomeChip == null) {
        break missingId;
      }

      id = R.id.incomeOrExpenseChipGroup;
      ChipGroup incomeOrExpenseChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (incomeOrExpenseChipGroup == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.subCategoriesChipGroup;
      ChipGroup subCategoriesChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (subCategoriesChipGroup == null) {
        break missingId;
      }

      return new FragmentCategoryDialogListDialogBinding((ConstraintLayout) rootView, addFabButton,
          categoryDialog, categoryNameText, categoryNameTextLayout, constraintLayoutTapper,
          deleteFabButton, deleteSubCategoriesFabButton, expenseChip, incomeChip,
          incomeOrExpenseChipGroup, linearLayout, subCategoriesChipGroup);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
