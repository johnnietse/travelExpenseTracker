// Generated by view binder compiler. Do not edit!
package com.example.xpense_tracker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.xpense_tracker.R;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAddExpenseOrIncomeDialogListDialogBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ExtendedFloatingActionButton addFabButton;

  @NonNull
  public final TextInputEditText amountInputText;

  @NonNull
  public final TextInputLayout amountInputTextLayout;

  @NonNull
  public final LinearLayout amountLinearLayout;

  @NonNull
  public final FloatingActionButton calendarButton;

  @NonNull
  public final ConstraintLayout constraintLayoutTapper;

  @NonNull
  public final Chip expenseChip;

  @NonNull
  public final Chip incomeChip;

  @NonNull
  public final ChipGroup incomeOrExpenseCategoriesChipGroup;

  @NonNull
  public final ChipGroup incomeOrExpenseChipGroup;

  @NonNull
  public final ChipGroup incomeOrExpenseSubCategoriesChipGroup;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final ConstraintLayout list;

  @NonNull
  public final TextInputEditText noteInputText;

  @NonNull
  public final TextInputLayout noteInputTextLayout;

  @NonNull
  public final LinearLayout noteLinearLayout;

  private FragmentAddExpenseOrIncomeDialogListDialogBinding(@NonNull ConstraintLayout rootView,
      @NonNull ExtendedFloatingActionButton addFabButton,
      @NonNull TextInputEditText amountInputText, @NonNull TextInputLayout amountInputTextLayout,
      @NonNull LinearLayout amountLinearLayout, @NonNull FloatingActionButton calendarButton,
      @NonNull ConstraintLayout constraintLayoutTapper, @NonNull Chip expenseChip,
      @NonNull Chip incomeChip, @NonNull ChipGroup incomeOrExpenseCategoriesChipGroup,
      @NonNull ChipGroup incomeOrExpenseChipGroup,
      @NonNull ChipGroup incomeOrExpenseSubCategoriesChipGroup, @NonNull LinearLayout linearLayout,
      @NonNull ConstraintLayout list, @NonNull TextInputEditText noteInputText,
      @NonNull TextInputLayout noteInputTextLayout, @NonNull LinearLayout noteLinearLayout) {
    this.rootView = rootView;
    this.addFabButton = addFabButton;
    this.amountInputText = amountInputText;
    this.amountInputTextLayout = amountInputTextLayout;
    this.amountLinearLayout = amountLinearLayout;
    this.calendarButton = calendarButton;
    this.constraintLayoutTapper = constraintLayoutTapper;
    this.expenseChip = expenseChip;
    this.incomeChip = incomeChip;
    this.incomeOrExpenseCategoriesChipGroup = incomeOrExpenseCategoriesChipGroup;
    this.incomeOrExpenseChipGroup = incomeOrExpenseChipGroup;
    this.incomeOrExpenseSubCategoriesChipGroup = incomeOrExpenseSubCategoriesChipGroup;
    this.linearLayout = linearLayout;
    this.list = list;
    this.noteInputText = noteInputText;
    this.noteInputTextLayout = noteInputTextLayout;
    this.noteLinearLayout = noteLinearLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAddExpenseOrIncomeDialogListDialogBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAddExpenseOrIncomeDialogListDialogBinding inflate(
      @NonNull LayoutInflater inflater, @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_add_expense_or_income_dialog_list_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAddExpenseOrIncomeDialogListDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addFabButton;
      ExtendedFloatingActionButton addFabButton = ViewBindings.findChildViewById(rootView, id);
      if (addFabButton == null) {
        break missingId;
      }

      id = R.id.amountInputText;
      TextInputEditText amountInputText = ViewBindings.findChildViewById(rootView, id);
      if (amountInputText == null) {
        break missingId;
      }

      id = R.id.amountInputTextLayout;
      TextInputLayout amountInputTextLayout = ViewBindings.findChildViewById(rootView, id);
      if (amountInputTextLayout == null) {
        break missingId;
      }

      id = R.id.amountLinearLayout;
      LinearLayout amountLinearLayout = ViewBindings.findChildViewById(rootView, id);
      if (amountLinearLayout == null) {
        break missingId;
      }

      id = R.id.calendarButton;
      FloatingActionButton calendarButton = ViewBindings.findChildViewById(rootView, id);
      if (calendarButton == null) {
        break missingId;
      }

      id = R.id.constraintLayoutTapper;
      ConstraintLayout constraintLayoutTapper = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayoutTapper == null) {
        break missingId;
      }

      id = R.id.expenseChip;
      Chip expenseChip = ViewBindings.findChildViewById(rootView, id);
      if (expenseChip == null) {
        break missingId;
      }

      id = R.id.incomeChip;
      Chip incomeChip = ViewBindings.findChildViewById(rootView, id);
      if (incomeChip == null) {
        break missingId;
      }

      id = R.id.incomeOrExpenseCategoriesChipGroup;
      ChipGroup incomeOrExpenseCategoriesChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (incomeOrExpenseCategoriesChipGroup == null) {
        break missingId;
      }

      id = R.id.incomeOrExpenseChipGroup;
      ChipGroup incomeOrExpenseChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (incomeOrExpenseChipGroup == null) {
        break missingId;
      }

      id = R.id.incomeOrExpenseSubCategoriesChipGroup;
      ChipGroup incomeOrExpenseSubCategoriesChipGroup = ViewBindings.findChildViewById(rootView, id);
      if (incomeOrExpenseSubCategoriesChipGroup == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      ConstraintLayout list = (ConstraintLayout) rootView;

      id = R.id.noteInputText;
      TextInputEditText noteInputText = ViewBindings.findChildViewById(rootView, id);
      if (noteInputText == null) {
        break missingId;
      }

      id = R.id.noteInputTextLayout;
      TextInputLayout noteInputTextLayout = ViewBindings.findChildViewById(rootView, id);
      if (noteInputTextLayout == null) {
        break missingId;
      }

      id = R.id.noteLinearLayout;
      LinearLayout noteLinearLayout = ViewBindings.findChildViewById(rootView, id);
      if (noteLinearLayout == null) {
        break missingId;
      }

      return new FragmentAddExpenseOrIncomeDialogListDialogBinding((ConstraintLayout) rootView,
          addFabButton, amountInputText, amountInputTextLayout, amountLinearLayout, calendarButton,
          constraintLayoutTapper, expenseChip, incomeChip, incomeOrExpenseCategoriesChipGroup,
          incomeOrExpenseChipGroup, incomeOrExpenseSubCategoriesChipGroup, linearLayout, list,
          noteInputText, noteInputTextLayout, noteLinearLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
